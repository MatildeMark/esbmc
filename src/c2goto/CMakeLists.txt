add_executable(c2goto c2goto.cpp cprover_blank_library.cpp)
target_include_directories(c2goto
    PRIVATE ${Boost_INCLUDE_DIRS}
    PRIVATE ${CMAKE_BINARY_DIR}/src
    )
  
target_link_libraries(c2goto 
  clangcfrontend gotoprograms langapi util_esbmc irep2
  default_message ${Boost_LIBRARIES})
add_subdirectory (headers)

if(DEFINED C2GOTO_INCLUDE_DIR)
  set(multiarch "${C2GOTO_INCLUDE_DIR}")
else()
  set(multiarch "/usr/include/${CMAKE_LIBRARY_ARCHITECTURE}")
endif()

set(archs --32 --64)
set(floats "--fixedbv -D__ESBMC_FIXEDBV" --floatbv)
set(cherimodes "" "--cheri hybrid" "--cheri purecap")
set(combinations archs floats cherimodes)

function(foreach_in_cross_product_rec fn acc_i acc_v)
  list(LENGTH ARGN n)
  if(n EQUAL 0)
    # quotes around ${acc_v} are necessary since CMake does not handle empty
    # 'list' elements, sigh...
    cmake_language(CALL ${fn} "${acc_i}" "${acc_v}")
  else()
    list(GET ARGN 0 x)
    if(n GREATER 1)
      list(SUBLIST ARGN 1 -1 xs)
    else()
      list(SUBLIST ARGN 0 0 xs)
    endif()
    set(n 0)
    foreach(item IN LISTS ${x})
      set(ai ${acc_i})
      list(APPEND ai "${n}")
      set(av "${acc_v}")
      list(APPEND av "${item}")
      math(EXPR n "${n}+1")
      foreach_in_cross_product_rec(${fn} "${ai}" "${av}" ${xs})
    endforeach()
  endif()
endfunction()

function(foreach_in_cross_product fn)
  list(SUBLIST ARGN 0 0 empty)
  foreach_in_cross_product_rec(${fn} "${empty}" "${empty}" ${ARGN})
endfunction()

function(test idcs tuple)
  message(STATUS "test: idcs: ${idcs}, tuple: ${tuple}")
  list(GET idcs 0 arch_i)
  list(GET idcs 1 float_i)
  list(GET idcs 2 cheri_i)
  message(STATUS "test: clib_${arch_i}_${float_i}_${cheri_i}: ${tuple}")
endfunction()

foreach_in_cross_product(test archs floats cherimodes)


set (clib32_config clib32.c --32 --fixedbv -D__ESBMC_FIXEDBV)
set (clib64_config clib64.c --64 --fixedbv -D__ESBMC_FIXEDBV)
set (clib32f_config clib32_fp.c --32 --floatbv)
set (clib64f_config clib64_fp.c --64 --floatbv)
set (inputs clib32_config
            clib64_config
            clib32f_config
            clib64f_config
    )

if(ESBMC_CHERI_HYBRID_SYSROOT)
  set (clib32_cherih_config clib32_cherih.c --32 --fixedbv -D__ESBMC_FIXEDBV --cheri hybrid --sysroot "${ESBMC_CHERI_HYBRID_SYSROOT}")
  set (clib64_cherih_config clib64_cherih.c --64 --fixedbv -D__ESBMC_FIXEDBV --cheri hybrid --sysroot "${ESBMC_CHERI_HYBRID_SYSROOT}")
  set (clib32f_cherih_config clib32_fp_cherih.c --32 --floatbv --cheri hybrid --sysroot "${ESBMC_CHERI_HYBRID_SYSROOT}")
  set (clib64f_cherih_config clib64_fp_cherih.c --64 --floatbv --cheri hybrid --sysroot "${ESBMC_CHERI_HYBRID_SYSROOT}")
  list(APPEND inputs
            #clib32_cherih_config
            clib64_cherih_config
            #clib32f_cherih_config
            clib64f_cherih_config)
endif()

if(ESBMC_CHERI_PURECAP_SYSROOT)
  set (clib32_cherip_config clib32_cherip.c --32 --fixedbv -D__ESBMC_FIXEDBV --cheri purecap --sysroot "${ESBMC_CHERI_PURECAP_SYSROOT}")
  set (clib64_cherip_config clib64_cherip.c --64 --fixedbv -D__ESBMC_FIXEDBV --cheri purecap --sysroot "${ESBMC_CHERI_PURECAP_SYSROOT}")
  set (clib32f_cherip_config clib32_fp_cherip.c --32 --floatbv --cheri purecap --sysroot "${ESBMC_CHERI_PURECAP_SYSROOT}")
  set (clib64f_cherip_config clib64_fp_cherip.c --64 --floatbv --cheri purecap --sysroot "${ESBMC_CHERI_PURECAP_SYSROOT}")
  list(APPEND inputs
            #clib32_cherip_config
            clib64_cherip_config
            #clib32f_cherip_config
            clib64f_cherip_config)
endif()

function(mangle_clib output)
  set(result "")
   file(GLOB c2goto_library_files
    "${CMAKE_CURRENT_SOURCE_DIR}/library/*.c")
  file(GLOB c2goto_libm_files
    "${CMAKE_CURRENT_SOURCE_DIR}/library/libm/*.c")
  foreach(in_f ${ARGN})
    set (in_f "${${in_f}}")
    list(GET in_f 0 out_name)
    list(SUBLIST in_f 1 -1 in_flags)
    file(RELATIVE_PATH out_file ${CMAKE_CURRENT_SOURCE_DIR}
                                ${CMAKE_CURRENT_SOURCE_DIR}/${out_name})
    string(REGEX REPLACE \\.c$ .goto out_goto "${out_name}")
    set(out_goto "${CMAKE_CURRENT_BINARY_DIR}/${out_goto}")
    set(out_file "${CMAKE_CURRENT_BINARY_DIR}/${out_file}")

    if(ENABLE_LIBM)
      set(inputs_c ${c2goto_library_files} ${c2goto_libm_files})
    else()
      set(inputs_c ${c2goto_library_files})
    endif()
    set(CMD c2goto -I "${cheri_compressed_cap_SOURCE_DIR}" ${OS_C2GOTO_FLAGS}
                   ${inputs_c} ${in_flags} --output ${out_goto})
    add_custom_command(OUTPUT ${out_goto}
      COMMAND ${CMD}
      DEPENDS c2goto ${c2goto_library_files} ${c2goto_libm_files}
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
      COMMENT "Generating libc model ${out_goto}"
      VERBATIM
      )

    add_custom_command(OUTPUT ${out_file}
      COMMAND ${Python_EXECUTABLE} ${CMAKE_SOURCE_DIR}/scripts/flail.py ${out_goto} ${out_file}
      DEPENDS ${out_goto} ${CMAKE_SOURCE_DIR}/scripts/flail.py
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
      COMMENT "Converting libc model ${out_goto} to data"
      VERBATIM
      )

    list(APPEND result ${out_file})
  endforeach()
  set(${output} "${result}" PARENT_SCOPE)
endfunction()

message(STATUS "Multiarch include for c2goto: ${multiarch}. You may want to override C2GOTO_INCLUDE_DIR")
mangle_clib(mangled_files ${inputs})
add_library(clibs ${mangled_files} cprover_library.cpp)
target_include_directories(clibs
    PRIVATE ${Boost_INCLUDE_DIRS}
    PRIVATE ${CMAKE_BINARY_DIR}/src
)
target_link_libraries(clibs fmt::fmt)
